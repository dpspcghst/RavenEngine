// Main.cpp
// Standard library headers
#include <iostream>

// Third-party library headers
#include "imgui.h"

// Raven headers
#include "ImGuiSetup.h"
#include "MenuSystem.h"
#include "ResourceManager.h"
#include "WindowManager.h"
#include "Workspace.h"

int main() {
    // Initialize WindowManager and create window
    WindowManager windowManager;
    GLFWwindow* window = windowManager.createWindow(800, 600, "Raven Engine");
    windowManager.setWindowProperties(window);
    ResourceManager::LoadIcon(window, L"../src/Assets/raven16x16.ico", L"../src/Assets/raven32x32.ico");
    ResourceManager::SetWindowIcons(window);
    ImGuiSetup::Init(window);

    // Create Workspace instance
    int width, height;
    glfwGetFramebufferSize(window, &width, &height);
    float menuBarHeight = ImGui::GetFrameHeight();
    Workspace workspace(width, height - static_cast<int>(menuBarHeight), static_cast<int>(menuBarHeight), window);

    MenuSystem menuSystem(workspace);

    // Main loop
    while (!glfwWindowShouldClose(window)) {
        glfwPollEvents();
        ImGuiSetup::NewFrame();
        
        menuSystem.createMainMenu(window);
        workspace.Update(); // Update all components
        workspace.Render(); // Render workspace and all components

        ImGuiSetup::Render();
        glfwSwapBuffers(window);
    }

    ImGuiSetup::Shutdown();
    ResourceManager::UnloadIcon();
    windowManager.cleanUp(window);

    return 0;
}

// to do:
// - doodlemanager might not be necessary
// - doodle as a component would then be managed by the component manager
// - this would allow for multiple doodles to be open at once (as "components")

// - research Render Engine's, how they work, how to implement one, and how we will integrate it into the project

// - design sprite handling system
// - design sprite editor

// - design animation handling system
// - design animation editor

// - design tilemap handling system
// - design tilemap editor

// - design scene handling system
// - design scene editor

// - design audio handling system
// - design audio editor

// - design project handling system
// - design project editor

// - design resource manager
// - design component manager
// - design entity manager
// - design scene manager
// - design project manager

// - design a way to save and load projects
// - design a way to save and load scenes
// - design a way to save and load entities
// - design a way to save and load components
// - design a way to save and load resources

// some of this down here was generated by the ai